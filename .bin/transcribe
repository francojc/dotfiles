#!/usr/bin/env bash

# transcribe: Transcribe an audio file using OpenAI's Whisper
# Usage: transcribe -f FILE_PATH
# Example: transcribe -f "audio.mp3"

set -euo pipefail

# Function to display help message
show_help() {
  echo "Usage: $0 [-h] -f FILE_PATH"
  echo "Transcribe an audio file using OpenAI Whisper-1"
  echo "Supported formats: mp3, mp4, mpeg, mpga, m4a, wav, webm"
  exit 0
}

# Validate dependencies
command -v curl >/dev/null 2>&1 || { echo "Error: curl is required" >&2; exit 1; }
command -v jq >/dev/null 2>&1 || { echo "Error: jq is required" >&2; exit 1; }
command -v pass >/dev/null 2>&1 || { echo "Error: pass is required" >&2; exit 1; }

get_pass() {
    local key_name="$1"
    pass "API/${key_name}" || { 
        echo "Error: API key not found in pass store: API/${key_name}" >&2
        exit 1
    }
}

# Check API key using pass
OPENAI_API_KEY=$(get_pass OPENAI_API_KEY)

# Parse arguments
while getopts ":hf:" opt; do
  case $opt in
    h) show_help ;;
    f) file_path="$OPTARG" ;;
    \?) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
    :) echo "Option -$OPTARG requires an argument" >&2; exit 1 ;;
  esac
done

# Check if file path was provided
if [[ -z "${file_path:-}" ]]; then
  echo "Error: File path (-f) is required" >&2
  echo "Use -h for usage information" >&2
  exit 1
fi

# Validate file exists
if [[ ! -f "$file_path" ]]; then
  echo "Error: File not found: $file_path" >&2
  exit 1
fi

# Generate output filename
output_file="${file_path%.*}.txt"

# Call OpenAI API with better output handling
response=$(curl -s --write-out "\n%{http_code}" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -H "Content-Type: multipart/form-data" \
  -F file="@$file_path" \
  -F model="whisper-1" \
  -F response_format="text" \
  https://api.openai.com/v1/audio/transcriptions)

# Separate HTTP status code and content
http_code=$(echo "$response" | tail -n 1)
content=$(echo "$response" | sed '$d')

# Check for errors
if [[ $http_code -ne 200 ]]; then
  if error_message=$(echo "$content" | jq -r '.error.message' 2>/dev/null); then
    echo "API Error (HTTP $http_code): $error_message" >&2
  else
    echo "API Error (HTTP $http_code): Received non-JSON response" >&2
    echo "Raw response: '$content'" >&2
  fi
  exit 1
fi

# Save successful response (plain text)
echo "$content" > "$output_file"
echo "Transcript saved to: $output_file"
